def find_averages_of_subarrays(K, arr):
    result = []
    # windowSum, windowStart = 0.0, 0

    windowSum = 0.0
    windowStart = 0

    for i in range(len(arr)):
        windowSum += arr[i]  # add the next element
        # slide the window, we don't need to slide if we've not hit the required window size of 'k'
        if i >= K - 1:
            result.append(windowSum / K)  # calculate the average
            windowSum -= arr[windowStart]  # subtract the element going out
            windowStart += 1  # slide the window ahead

    return result

result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])

# print("Averages of subarrays of size K: " + str(result))

def longest_substring_with_k_distinct(str1, k):

    windowStart = 0
    max_length = 0
    character_freq = {}

    for windowEnd in range(len(str1)):
        right_character = str1[windowEnd]

        if right_character not in character_freq:
            character_freq[right_character] = 0

        character_freq[right_character] += 1

        while len(character_freq) > k:
            left_character = str1[windowStart]
            character_freq[left_character] -= 1

            if character_freq[left_character] == 0:
                del character_freq[left_character]
            
            windowStart += 1

            max_length = max(max_length, windowEnd - windowStart + 1)
        
    return max_length

string_1 = "cbbebi"
# print(longest_substring_with_k_distinct(string_1, 3))

def fruits_into_basket(fruits):

    windowStart = 0
    max_length = 0
    fruit_basket = {}

    for windowEnd in range(len(fruits)):
        right_character = fruits[windowEnd]

        if right_character not in fruit_basket:
            fruit_basket[right_character] = 0
        
        fruit_basket[right_character] += 1

        while len(fruit_basket) > 2:
            left_character = fruits[windowStart]
            fruit_basket[left_character] -= 1

            if fruit_basket[left_character] == 0:
                del fruit_basket[left_character]

            windowStart += 1
        
        max_length = max(max_length, windowEnd - windowStart + 1)
    
    return max_length

result = fruits_into_basket(['A', 'B', 'C', 'A', 'C'])
# print("The MAX number of fruits in both baskets is: " + str(result))

def non_repeat_substring(str):

    windowStart = 0
    max_length = 0
    character_frequence = {}

    for windowEnd in range(len(str)):
        right_character = str[windowEnd]

        if right_character in character_frequence:

            windowStart = max(windowStart, character_frequence[right_character] + 1)

        character_frequence[right_character] = windowEnd

        max_length = max(max_length, windowEnd - windowStart + 1)
    
    return max_length

result = non_repeat_substring("abccdef")
print("The length of the longest substring with distinct characters is: " + str(result))

