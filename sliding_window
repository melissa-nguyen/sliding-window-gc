def find_averages_of_subarrays(K, arr):
    result = []
    # windowSum, windowStart = 0.0, 0

    windowSum = 0.0
    windowStart = 0

    for i in range(len(arr)):
        windowSum += arr[i]  # add the next element
        # slide the window, we don't need to slide if we've not hit the required window size of 'k'
        if i >= K - 1:
            result.append(windowSum / K)  # calculate the average
            windowSum -= arr[windowStart]  # subtract the element going out
            windowStart += 1  # slide the window ahead

    return result

result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])

# print("Averages of subarrays of size K: " + str(result))

def longest_substring_with_k_distinct(str1, k):

  windowStart = 0
  max_length = 0
  character_freq = {}

  for windowEnd in range(len(str1)):
    right_character = str1[windowEnd]

    if right_character not in character_freq:
      character_freq[right_character] = 0

    character_freq[right_character] += 1

    while len(character_freq) > k:
      left_character = str1[windowStart]
      character_freq[left_character] -= 1

      if character_freq[left_character] == 0:
        del character_freq[left_character]
      
      windowStart += 1

      max_length = max(max_length, windowEnd - windowStart + 1)
    
  return max_length

string_1 = "cbbebi"
# print(longest_substring_with_k_distinct(string_1, 3))

def fruits_into_basket(fruits):
  
  windowStart = 0
  max_length = 0
  fruit_basket = {}

  for windowEnd in range(len(fruits)):
    right_character = fruits[windowEnd]

    if right_character not in fruit_basket:
      fruit_basket[right_character] = 0
    
    fruit_basket[right_character] += 1

    while len(fruit_basket) > 2:
      left_character = fruits[windowStart]
      fruit_basket[left_character] -= 1

      if fruit_basket[left_character] == 0:
        del fruit_basket[left_character]

      windowStart += 1
      
    max_length = max(max_length, windowEnd - windowStart + 1)
  
  return max_length


result = fruits_into_basket(['A', 'B', 'C', 'A', 'C'])
# print("The MAX number of fruits in both baskets is: " + str(result))

def non_repeat_substring(str):
  
  windowStart = 0
  max_length = 0
  character_frequence = {}

  for windowEnd in range(len(str)):
    right_character = str[windowEnd]

    if right_character in character_frequence:

      windowStart = max(windowStart, character_frequence[right_character] + 1)

    character_frequence[right_character] = windowEnd

    max_length = max(max_length, windowEnd - windowStart + 1)
  
  return max_length


result = non_repeat_substring("abccdef")
# print("The length of the longest substring with distinct characters is: " + str(result))

def length_of_longest_substring(str1, k):
  window_start, max_length, max_repeat_letter_count = 0, 0, 0
  frequency_map = {}

  # Try to extend the range [window_start, window_end]
  for window_end in range(len(str1)):
    right_char = str1[window_end]
    if right_char not in frequency_map:
      frequency_map[right_char] = 0
    frequency_map[right_char] += 1

    max_repeat_letter_count = max(max_repeat_letter_count, frequency_map[right_char])

    # Current window size is from window_start to window_end, overall we have a letter which is
    # repeating 'max_repeat_letter_count' times, this means we can have a window which has one letter
    # repeating 'max_repeat_letter_count' times and the remaining letters we should replace.
    # if the remaining letters are more than 'k', it is the time to shrink the window as we
    # are not allowed to replace more than 'k' letters
    if (window_end - window_start + 1 - max_repeat_letter_count) > k:
      left_char = str1[window_start]
      frequency_map[left_char] -= 1
      window_start += 1

    max_length = max(max_length, window_end - window_start + 1)
  return max_length

result1 = length_of_longest_substring("aabccbb", 2)
# print("The length of the longest substring is: " + str(result1))

def length_of_longest_substring(arr, k):

  # iterate through array to add 1 index at a time to Window
  # will also need to keep track of tthe count of 1s
  windowStart, max_length, one_counter = 0, 0, 0
  # freq_chart = {}

  # repeat_one will keep count of # of 1s in current windowStart
  for windowEnd in range(len(arr)):
    # right_num = arr[windowEnd]
    if arr[windowEnd] == 1: 
      one_counter += 1

    # if right_num not in freq_chart:
    #   freq_chart[right_num] = 0
    
    # freq_chart[right_num] += 1

    # if right_num == 1:
    #   one_counter += 1

    # max_repeat_one = max(max_repeat_one, one_counter)

  # if remaining 0's are <= k --> we can replace them all
  # if remaining 0's are > k, shrink the window since we can't replace more than k 0s
    if (windowEnd - windowStart + 1 - one_counter) > k:
      if arr[windowStart] == 1:
        one_counter -= 1
        # freq_chart[left_char] -= 1
      windowStart += 1
    
    max_length = max(max_length, windowEnd - windowStart + 1)
  
  return max_length

result = length_of_longest_substring([0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], 2)
# print("Length of the longest substring with contiguous 1s is: ", str(result))

def find_permutation(str, pattern):

  # iterate through pattern and add to hashtable 
  #  iterate through string, if none of the letters in the hashtable are in the string --> false not a permutation 

  pattern_table = {}

  for letter in pattern:
    if letter not in pattern_table:
      pattern_table[letter] = 0
    
    pattern_table[letter] += 1
  
  windowStart = 0
  matched_letters = 0

  for windowEnd in range(len(str)):
    right_character = str[windowEnd]

    if right_character in pattern_table:
      pattern_table[right_character] -= 1
      if pattern_table[right_character] == 0:
        matched_letters += 1
    
    if matched_letters == len(pattern_table):
      return True
    
    if windowEnd >= len(pattern) - 1:
      left_character = str[windowStart]
      windowStart += 1

      if left_character in pattern_table:
        if pattern_table[left_character] == 0:
          matched_letters -= 1
        
        pattern_table[left_character] += 1

  return False 
          

result = find_permutation("oidbcaf", "dc")
print("T/F the string contains a permutation of the pattern:", str(result))